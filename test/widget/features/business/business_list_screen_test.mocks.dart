// Mocks generated by Mockito 5.4.5 from annotations
// in white_label_pos_mobile/test/widget/features/business/business_list_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:white_label_pos_mobile/src/features/business/business_repository.dart'
    as _i3;
import 'package:white_label_pos_mobile/src/features/business/models/business.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBusiness_0 extends _i1.SmartFake implements _i2.Business {
  _FakeBusiness_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BusinessRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBusinessRepository extends _i1.Mock
    implements _i3.BusinessRepository {
  MockBusinessRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Business>> getBusinesses() => (super.noSuchMethod(
        Invocation.method(
          #getBusinesses,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Business>>.value(<_i2.Business>[]),
      ) as _i4.Future<List<_i2.Business>>);

  @override
  _i4.Future<_i2.Business?> getBusiness(int? businessId) => (super.noSuchMethod(
        Invocation.method(
          #getBusiness,
          [businessId],
        ),
        returnValue: _i4.Future<_i2.Business?>.value(),
      ) as _i4.Future<_i2.Business?>);

  @override
  _i4.Future<_i2.Business> createBusiness(_i2.Business? business) =>
      (super.noSuchMethod(
        Invocation.method(
          #createBusiness,
          [business],
        ),
        returnValue: _i4.Future<_i2.Business>.value(_FakeBusiness_0(
          this,
          Invocation.method(
            #createBusiness,
            [business],
          ),
        )),
      ) as _i4.Future<_i2.Business>);

  @override
  _i4.Future<_i2.Business> updateBusiness(_i2.Business? business) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateBusiness,
          [business],
        ),
        returnValue: _i4.Future<_i2.Business>.value(_FakeBusiness_0(
          this,
          Invocation.method(
            #updateBusiness,
            [business],
          ),
        )),
      ) as _i4.Future<_i2.Business>);

  @override
  _i4.Future<void> deleteBusiness(int? businessId) => (super.noSuchMethod(
        Invocation.method(
          #deleteBusiness,
          [businessId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
